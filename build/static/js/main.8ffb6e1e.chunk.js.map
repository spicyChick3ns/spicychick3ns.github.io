{"version":3,"sources":["config.js","components/ContactItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","github","resume","instagram","email","ContactItem","style","this","props","type","concat","react_default","a","createElement","className","target","href","url","Component","TITLES","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","things","cb","i","setInterval","length","clearInterval","setState","word","console","log","state","components_ContactItem","config","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yEAAAA,EAAOC,QAAW,CACdC,OAAQ,mCACRC,OAAQ,qFACRC,UAAW,0CACXC,MAAO,iMCmBIC,mLAnBP,IAAIC,EAIJ,OAFEA,EADmB,WAApBC,KAAKC,MAAMC,MAAyC,cAApBF,KAAKC,MAAMC,KACrC,UAAAC,OAAaH,KAAKC,MAAMC,MACxB,UAAAC,OAAaH,KAAKC,MAAMC,MAE3BE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,KAAGE,OAAO,SAASC,KAAMT,KAAKC,MAAMS,KAChCN,EAAAC,EAAAC,cAAA,KAAGC,UAAWR,aATRY,qCCGpBC,EAAS,CAAC,cAAe,mBAAoB,qBA8CpCC,cA5Cb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KAKRmB,OAAS,SAACC,GACR,IAAIC,EAAI,EACRC,YAAY,WACND,IAAMV,EAAOY,SACfF,EAAE,EACFG,iBAEFX,EAAKY,SAAS,CACZC,KAAMf,EAAOU,KAEfM,QAAQC,IAAIjB,EAAOU,IACnBA,KACC,MAhBHR,EAAKgB,MAAQ,CACXH,KAAM,qBAHSb,mFAqBjBd,KAAKoB,0CAGL,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,oBAAAH,OAAeH,KAAK8B,MAAMH,QAE5BvB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAACyB,EAAD,CAAa7B,KAAK,SAASQ,IAAKsB,IAAOtC,SACvCU,EAAAC,EAAAC,cAACyB,EAAD,CAAa7B,KAAK,YAAYQ,IAAKsB,IAAOpC,YAC1CQ,EAAAC,EAAAC,cAACyB,EAAD,CAAa7B,KAAK,OAAOQ,IAAKsB,IAAOrC,SACrCS,EAAAC,EAAAC,cAACyB,EAAD,CAAa7B,KAAK,WAAWQ,IAAKsB,IAAOnC,kBApCrCc,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACLnC,EAAAC,EAAAC,cAACkC,EAAD,MACGC,SAASC,eAAe,SDyHzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8ffb6e1e.chunk.js","sourcesContent":["module.exports =  {\n    github: 'https://github.com/spicyChick3ns',\n    resume: 'https://drive.google.com/file/d/1OulUyq5kHp5tOmjbGWl26-HQruqrq3ms/view?usp=sharing',\n    instagram: 'https://www.instagram.com/melworkswood/',\n    email: 'mailto:gonzalesmsd@gmail.com',\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nclass ContactItem extends Component {\n    render() {\n        let style;\n        (this.props.type === 'github' || this.props.type === 'instagram')\n        ? style = `fab fa-${this.props.type}` \n        : style = `far fa-${this.props.type}`\n        return (\n            <div className='contact-item'>\n                <a target='_blank' href={this.props.url}>      \n                    <i className={style}></i>\n                </a>\n            </div>\n        );\n    }\n};\n\nContactItem.propTypes = {\n    type: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n\n}\nexport default ContactItem;\n","import React, { Component } from 'react';\nimport ContactItem from './components/ContactItem';\nimport './App.css';\nimport config from './config';\n\nconst TITLES = ['wood worker', 'ukulele shredder', 'software engineer'];\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: 'software engineer',\n    }\n  }\n  things = (cb) =>{\n    let i = 0;\n    setInterval(() => {\n      if (i === TITLES.length) { \n        i=0;\n        clearInterval();\n      }\n      this.setState({\n        word: TITLES[i],\n      });\n      console.log(TITLES[i])\n      i++;\n    }, 1000)\n  }\n  componentDidMount() {\n    this.things();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>melissa gonzales</h1>\n          <h3>{`I am a ${this.state.word}`}</h3>\n        </header>\n        <main>\n          <div className=\"contact-container\">\n              <ContactItem type='github' url={config.github}/>\n              <ContactItem type='instagram' url={config.instagram}/>\n              <ContactItem type='file' url={config.resume}/>\n              <ContactItem type='envelope' url={config.email}/>\n          </div>\n        </main>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n    <App />\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}